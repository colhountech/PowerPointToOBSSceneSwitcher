name: Release PresentationObsSceneSwitcher

on:
  push:
    tags:
      - 'v*'

jobs:

  build:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: PowerPointToOBSSceneSwitcher                       # Replace with your solution name, i.e. MyWpfApp.sln.
      ProjectDirectory: PresentationObsSceneSwitcher    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      ProjectPath: PresentationObsSceneSwitcher\PresentationObsSceneSwitcher.csproj                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:ProjectPath
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Build
      run: dotnet build --configuration Release --no-restore $env:ProjectPath
      
    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Publish
      run: dotnet publish --configuration Release --no-restore $env:ProjectPath

    # Publish
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Exe
        path: ${{ env.ProjectDirectory }}\bin\Release\netcoreapp3.1\publish
      
    # Zip
    - name: Zip
      run: |
          cd ${{ env.ProjectDirectory }}\bin\Release\netcoreapp3.1\publish
          Compress-Archive -DestinationPath PresentationObsSceneSwitcher -Path .\*
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.ProjectDirectory }}\bin\Release\netcoreapp3.1\publish\PresentationObsSceneSwitcher.zip
        asset_name: PresentationObsSceneSwitcher.zip
        asset_content_type: application/zip